"""
Script de g√©n√©ration de graphiques √† partir des mod√®les dbt Gold
Ce script:
1. Se connecte √† Snowflake pour r√©cup√©rer les donn√©es analys√©es
2. Ex√©cute les requ√™tes SQL compil√©es par dbt
3. G√©n√®re des visualisations pour chaque analyse
4. Sauvegarde les graphiques au format PNG

Les graphiques g√©n√©r√©s incluent:
- Moyennes par cours et par ann√©e
- Top 10 des √©tudiants
- Taux d'√©chec par cours
- Meilleurs √©tudiants par cours
"""

import os  # Pour la gestion des fichiers et dossiers
import pandas as pd  # Pour la manipulation des donn√©es
import matplotlib.pyplot as plt  # Pour la cr√©ation des graphiques
import snowflake.connector  # Pour la connexion √† la base de donn√©es Snowflake

print("üîó Connexion √† Snowflake...")

"""
Configuration de la connexion √† Snowflake
Les credentials sont r√©cup√©r√©s depuis les variables d'environnement
pour des raisons de s√©curit√© et de portabilit√©
"""
conn = snowflake.connector.connect(
    user=os.getenv('SNOWFLAKE_USER'),
    password=os.getenv('SNOWFLAKE_PASSWORD'),
    account=os.getenv('SNOWFLAKE_ACCOUNT'),
    warehouse=os.getenv('SNOWFLAKE_WAREHOUSE'),
    database=os.getenv('SNOWFLAKE_DATABASE'),
    schema=os.getenv('SNOWFLAKE_SCHEMA')
)

cursor = conn.cursor()

"""
D√©finition des chemins vers les fichiers SQL compil√©s par dbt
Ces fichiers contiennent les requ√™tes optimis√©es pour chaque analyse
"""
sql_files = {
    "avg_grade_by_courses": "fakeschool_dbt/target/compiled/fakeschool_dbt/models/gold/avg_grade_by_course.sql",
    "avg_grade_by_students": "fakeschool_dbt/target/compiled/fakeschool_dbt/models/gold/avg_grade_by_student.sql",
    "courses_with_highest_failure_rate": "fakeschool_dbt/target/compiled/fakeschool_dbt/models/gold/courses_with_highest_failure_rate.sql",
    "top_students_per_courses": "fakeschool_dbt/target/compiled/fakeschool_dbt/models/gold/top_students_per_course.sql"
}

os.makedirs("charts", exist_ok=True)

"""
Boucle principale de g√©n√©ration des graphiques
Pour chaque fichier SQL:
1. V√©rifie l'existence du fichier
2. Lit et ex√©cute la requ√™te
3. Convertit les r√©sultats en DataFrame
4. G√©n√®re le graphique appropri√©
5. Sauvegarde le graphique en PNG
"""
for name, path in sql_files.items():
    # V√©rification de l'existence du fichier SQL
    if not os.path.isfile(path):
        print(f"‚ùå Le fichier {path} n'existe pas. Passage √† la suite.")
        continue

    print(f"üìÑ Ex√©cution de {path}")
    with open(path, "r") as f:
        query = f.read()

    print("Requ√™te SQL ex√©cut√©e :")
    print(query[:200] + "..." if len(query) > 200 else query)

    cursor.execute(query)
    df = pd.DataFrame(cursor.fetchall(), columns=[col[0] for col in cursor.description])

    if df.empty:
        print(f"‚ö†Ô∏è R√©sultat vide pour {name}")
        continue

    """
    Logique de g√©n√©ration des graphiques
    Chaque type d'analyse a son propre format de visualisation adapt√© :
    - avg_grade_by_courses : Graphique en barres group√©es par ann√©e
    - avg_grade_by_students : Top 10 des moyennes √©tudiants
    - courses_with_highest_failure_rate : Taux d'√©chec par cours
    - top_students_per_courses : Meilleur √©tudiant par cours
    """
    plt.figure(figsize=(10, 6))

    if name == "avg_grade_by_courses":
        """
        Graphique des moyennes par cours et par ann√©e
        - Conversion de l'ann√©e en string pour le groupement
        - Cr√©ation d'un tableau crois√© pour les barres group√©es
        - Affichage des moyennes par cours, group√©es par ann√©e
        """
        df["ANNEE_ENSEIGNEMENT"] = df["ANNEE_ENSEIGNEMENT"].astype(str)
        pivot_df = df.pivot(index="ANNEE_ENSEIGNEMENT", columns="COURSE_NAME", values="AVERAGE_GRADE")
        pivot_df.plot(kind="bar")
        plt.title("Average Grade by Course and Year")
        plt.ylabel("Average Grade")

    elif name == "avg_grade_by_students":
        """
        Graphique des 10 meilleurs √©tudiants
        - Tri des moyennes par ordre d√©croissant
        - S√©lection des 10 premiers
        - Graphique en barres avec couleur personnalis√©e
        """
        df_top = df.sort_values(by="AVERAGE_GRADE", ascending=False).head(10)
        df_top.plot(kind="bar", x="STUDENT_ID", y="AVERAGE_GRADE", legend=False, color="teal")
        plt.title("Top 10 Students by Average Grade")
        plt.ylabel("Average Grade")

    elif name == "courses_with_highest_failure_rate":
        """
        Graphique des cours avec le plus haut taux d'√©chec
        - Conversion du taux d'√©chec en nombre
        - Tri par taux d'√©chec d√©croissant
        - Graphique en barres rouge pour signaler les √©checs
        """
        df["FAILURE_RATE"] = pd.to_numeric(df["FAILURE_RATE"], errors="coerce")  # force en float
        df_sorted = df.sort_values(by="FAILURE_RATE", ascending=False).head(10)
        df_sorted.plot(kind="bar", x="COURSE_NAME", y="FAILURE_RATE", legend=False, color="tomato")

        print(df.dtypes)
        print(df.head())
        plt.title("Top 10 Courses with Highest Failure Rate")
        plt.ylabel("Failure Rate (%)")

    elif name == "top_students_per_courses":
        """
        Graphique des meilleurs √©tudiants par cours
        - Cr√©ation d'une √©tiquette combinant cours et ID √©tudiant
        - Un graphique en barres dor√©es pour les "meilleurs"
        - Affichage de la note du meilleur √©tudiant pour chaque cours
        """
        df["LABEL"] = df["COURSE_NAME"] + " (" + df["STUDENT_ID"].astype(str) + ")"
        df.plot(kind="bar", x="LABEL", y="GRADE", legend=False, color="goldenrod")
        plt.title("Top Student per Course")
        plt.ylabel("Grade")

    plt.tight_layout()
    output_path = f"charts/{name}.png"
    plt.savefig(output_path)
    print(f"‚úÖ Graphique sauvegard√© dans {output_path}")
    plt.close()

cursor.close()
conn.close()
print("üéâ Tous les graphiques g√©n√©r√©s avec succ√®s.")
